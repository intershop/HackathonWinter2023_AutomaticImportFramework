// =============================================================================
// File: ProcessStatistics.java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: CAPIInterface.xpt(checksum: d7e72c019a9c924abb3c241abf1b8d82)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
package com.intershop.component.processstatistics.capi;

import com.intershop.beehive.core.capi.domain.ExtensibleObject;
import com.intershop.beehive.core.capi.locking.Process;
import java.util.Date;

/**
 * This defines the business interface methods for ProcessStatistics as defined in the object model.
 * 
 * The ProcessStatistics persistent object is used to collect statistics information about any kind of processes. It is
 * usually used for collecting information about all replication processes or about all import process chains. There is
 * currently no automatic collection of any data. Instead, one has to use the pipelets or similar code to create
 * ProcessStatistics persistent objects. The ProcessStatistics persistent object uses XML custom attributes to be able
 * to store data with more than 4000 bytes/chars.
 * 
 * @author t.koerbs@intershop.de
 * @version 1.0, 2016-Nov-22
 * @since 3.3.2
 * 
 *        Initial version.
 *
 * 
 *        RESOURCE: com.intershop.component.processstatistics.capi.ProcessStatistics
 * 
 * @generated
 */
public interface ProcessStatistics extends ExtensibleObject
{
    /**
     * Returns the value of attribute 'type'.
     * <p>
     * The type of the process. Used to group processes of the same type when evaluating statistics. Usually something
     * like: "Import", "Replication".
     *
     * @return the value of the attribute 'type'
     * @generated
     */
    public String getType();

    /**
     * Returns the value of attribute 'name'.
     * <p>
     * The name of the process. Usually the name of the scheduled job or the replication process id.
     *
     * @return the value of the attribute 'name'
     * @generated
     */
    public String getName();

    /**
     * Sets the value of the attribute 'name'.
     * <p>
     * The name of the process. Usually the name of the scheduled job or the replication process id.
     *
     * @param aValue
     *            the new value of the attribute
     * @generated
     */
    public void setName(String aValue);

    /**
     * Returns the value of attribute 'startDate'.
     * <p>
     * The start date of the process.
     *
     * @return the value of the attribute 'startDate'
     * @generated
     */
    public Date getStartDate();

    /**
     * Sets the value of the attribute 'startDate'.
     * <p>
     * The start date of the process.
     *
     * @param aValue
     *            the new value of the attribute
     * @generated
     */
    public void setStartDate(Date aValue);

    /**
     * Returns the value of attribute 'endDate'.
     * <p>
     * The end date of the process.
     *
     * @return the value of the attribute 'endDate'
     * @generated
     */
    public Date getEndDate();

    /**
     * Sets the value of the attribute 'endDate'.
     * <p>
     * The end date of the process.
     *
     * @param aValue
     *            the new value of the attribute
     * @generated
     */
    public void setEndDate(Date aValue);

    /**
     * Checks whether the value of the attribute 'endDate' is null.
     * <p>
     * The end date of the process.
     *
     * @return true if the value of attribute 'endDate' is null, false otherwise
     * @generated
     */
    public boolean getEndDateNull();

    /**
     * Sets the value of the attribute 'endDate' to null.
     * <p>
     * The end date of the process.
     *
     * @param aFlag
     *            meaningless
     * @generated
     */
    public void setEndDateNull(boolean aFlag);

    /**
     * Returns the value of attribute 'result'.
     * <p>
     * The result code of the process. Usually something like: "SUCCESS", "WARNING", "FAILURE", "ERROR", "NOTFOUND",
     * "INTERRUPTED". See also process chain errors (&lt;p:ignore&gt;).
     *
     * @return the value of the attribute 'result'
     * @generated
     */
    public String getResult();

    /**
     * Sets the value of the attribute 'result'.
     * <p>
     * The result code of the process. Usually something like: "SUCCESS", "WARNING", "FAILURE", "ERROR", "NOTFOUND",
     * "INTERRUPTED". See also process chain errors (&lt;p:ignore&gt;).
     *
     * @param aValue
     *            the new value of the attribute
     * @generated
     */
    public void setResult(String aValue);

    /**
     * Checks whether the value of the attribute 'result' is null.
     * <p>
     * The result code of the process. Usually something like: "SUCCESS", "WARNING", "FAILURE", "ERROR", "NOTFOUND",
     * "INTERRUPTED". See also process chain errors (&lt;p:ignore&gt;).
     *
     * @return true if the value of attribute 'result' is null, false otherwise
     * @generated
     */
    public boolean getResultNull();

    /**
     * Sets the value of the attribute 'result' to null.
     * <p>
     * The result code of the process. Usually something like: "SUCCESS", "WARNING", "FAILURE", "ERROR", "NOTFOUND",
     * "INTERRUPTED". See also process chain errors (&lt;p:ignore&gt;).
     *
     * @param aFlag
     *            meaningless
     * @generated
     */
    public void setResultNull(boolean aFlag);

    /**
     * Returns the object for the relation 'process'.
     * <p>
     * The underlying process.
     *
     * @return the object for the relation 'process'
     * @generated
     */
    public Process getProcess();

    /**
     * Sets the object for the relation 'process'.
     * <p>
     * The underlying process.
     *
     * @param process
     *            the new object for the relation
     * @generated
     */
    public void setProcess(Process process);
}
