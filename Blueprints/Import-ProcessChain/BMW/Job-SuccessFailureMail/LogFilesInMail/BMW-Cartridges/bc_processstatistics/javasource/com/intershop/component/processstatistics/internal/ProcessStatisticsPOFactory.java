// =============================================================================
// File: ProcessStatisticsPOFactory.java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: ORMFactory.xpt(checksum: 6e6bf2256972a853c83260dcdcdafcb3)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
package com.intershop.component.processstatistics.internal;

import com.intershop.beehive.core.capi.common.Factory;
import com.intershop.beehive.core.capi.common.FinderException;
import com.intershop.beehive.core.capi.domain.Domain;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.orm.capi.common.CacheMode;
import com.intershop.beehive.orm.capi.common.FindMode;
import com.intershop.beehive.orm.capi.common.ORMObjectCollection;
import com.intershop.beehive.orm.capi.description.ClassDescription;
import com.intershop.beehive.orm.capi.engine.ORMEngine;
import java.util.Collections;
import java.util.Enumeration;

/**
 * This class provides life cycle management methods for the class ProcessStatisticsPO.
 *
 * @see com.intershop.component.processstatistics.internal.ProcessStatisticsPO
 * @generated
 */
public class ProcessStatisticsPOFactory extends Factory
{
    /**
     * The name which can be used to lookup a factory from the naming manager.
     * 
     * @deprecated use "NamingMgr.getInstance().lookupFactory(ProcessStatisticsPO.class)" instead
     * @generated
     */
    public static final String FACTORY_NAME = "com.intershop.component.processstatistics.internal.ProcessStatisticsPO";

    /**
     * The constructor.
     *
     * @generated
     */
    public ProcessStatisticsPOFactory(ORMEngine engine, ClassDescription classDescription)
    {
        super(engine, classDescription);

        ProcessStatisticsPO.typeAttribute = classDescription.getAttributeDescription("type");
        ProcessStatisticsPO.nameAttribute = classDescription.getAttributeDescription("name");
        ProcessStatisticsPO.startDateAttribute = classDescription.getAttributeDescription("startDate");
        ProcessStatisticsPO.endDateAttribute = classDescription.getAttributeDescription("endDate");
        ProcessStatisticsPO.resultAttribute = classDescription.getAttributeDescription("result");
        ProcessStatisticsPO.processUUIDAttribute = classDescription.getAttributeDescription("processUUID");

    }

    /**
     * Creates a new instance of class ProcessStatisticsPO.
     *
     * @return the new instance of class ProcessStatisticsPO
     * @generated modifiable
     */
    public ProcessStatisticsPO create(String UUID, String domainID)
    {

        ProcessStatisticsPOKey key = new ProcessStatisticsPOKey(UUID);
        ProcessStatisticsPO instance = (ProcessStatisticsPO)getEngine().getPersistenceManager().createObject(key,
                        getClassDescription());

        instance.setAttributeValue(ProcessStatisticsPO.domainIDAttribute, domainID);

        // {{ create
        // put your custom create code here
        // }} create

        return instance;
    }

    /**
     * Creates a new instance of class ProcessStatisticsPO.
     *
     * @return the new instance of class ProcessStatisticsPO
     * @generated
     */
    public ProcessStatisticsPO create(Domain domain)
    {
        return create(UUIDMgr.getInstance().createUUIDString(), domain.getUUID());
    }

    /**
     * Removes an object by its primary key.
     *
     * @generated
     */
    public void remove(ProcessStatisticsPOKey key)
    {
        ProcessStatisticsPO object = getObjectByPrimaryKey(key);
        if (object != null)
        {
            object.remove();
        }
    }

    /**
     * Locates an instance of class ProcessStatisticsPO based on its primary key.
     *
     * @param key
     *            the primary key to use for lookup
     * @return the object for the specified primary key
     * @exception com.intershop.beehive.core.capi.common.FinderException
     *                if the object wasn't found
     * @deprecated use getObjectByPrimaryKey now
     * @generated
     */
    public ProcessStatisticsPO findByPrimaryKey(ProcessStatisticsPOKey key) throws FinderException
    {
        return (ProcessStatisticsPO)super.findByPrimaryKeyObject(key);
    }

    /**
     * Locates an instance of class ProcessStatisticsPO based on its primary key.
     *
     * @param key
     *            the primary key to use for lookup
     * @return the object for the specified primary key or null, if it wasn't found
     * @generated
     */
    public ProcessStatisticsPO getObjectByPrimaryKey(ProcessStatisticsPOKey key)
    {
        return (ProcessStatisticsPO)super.getObjectByPrimaryKeyObject(key);
    }

    /**
     * Locates an instance of class ProcessStatisticsPO based on its primary key.
     *
     * @param key
     *            the primary key to use for lookup
     * @param findMode
     *            the strategy to use for the lookup
     * @return the object for the specified primary key
     * @exception com.intershop.beehive.core.capi.common.FinderException
     *                if the object wasn't found
     * @deprecated use getObjectByPrimaryKey now
     * @generated
     */
    public ProcessStatisticsPO findByPrimaryKey(ProcessStatisticsPOKey key, FindMode mode) throws FinderException
    {
        return (ProcessStatisticsPO)super.findByPrimaryKeyObject(key, mode);
    }

    /**
     * Locates an instance of class ProcessStatisticsPO based on its primary key.
     *
     * @param key
     *            the primary key to use for lookup
     * @param findMode
     *            the strategy to use for the lookup
     * @return the object for the specified primary key or null, if it wasn't found
     * @generated
     */
    public ProcessStatisticsPO getObjectByPrimaryKey(ProcessStatisticsPOKey key, FindMode mode)
    {
        return (ProcessStatisticsPO)super.getObjectByPrimaryKeyObject(key, mode);
    }

    /**
     * Locates instances of class ProcessStatisticsPO based on the value of the attribute 'domainID'.
     *
     * @param value
     *            the value of the attribute 'domainID' to use for lookup
     * @return a list of instances of class ProcessStatisticsPO that match the specified value of the attribute domainID
     * @deprecated use getObjectsByDomainID() instead
     * @generated
     */
    public Enumeration findByDomainID(String value)
    {
        return Collections.enumeration(getObjectsByDomainID(value));
    }

    /**
     * Locates instances of class ProcessStatisticsPO based on the value of the attribute 'domainID'.
     *
     * @param value
     *            the value of the attribute 'domainID' to use for lookup
     * @return a list of instances of class ProcessStatisticsPO that match the specified value of attribute domainID
     * @generated
     */
    public ORMObjectCollection getObjectsByDomainID(String value)
    {
        return getEngine().getPersistenceManager().getObjectsByAttribute(value, ProcessStatisticsPO.domainIDAttribute,
                        getClassDescription());
    }

    /**
     * Locates instances of class ProcessStatisticsPO based on the value of the attribute 'domainID'.
     *
     * Depending on the passed cache mode, the collection internally caches the result objects or not. If caching is
     * used, all results are cached in the collection and it can be iterated multiple times without repeated queries to
     * the database. If no caching is used, the results will not be cached by the collection. Each call to iterator will
     * execute the query again. This mode should be used when large result sets are expected and caching all results is
     * not possible.
     * 
     * @param value
     *            the value of the attribute 'domainID' to use for lookup
     * @param cacheMode
     *            the cache mode that specifies how to handle resolved objects
     * @return a list of instances of class ProcessStatisticsPO that match the specified value of attribute domainID
     * @generated
     */
    public ORMObjectCollection getObjectsByDomainID(String value, CacheMode cacheMode)
    {
        return getEngine().getPersistenceManager().getObjectsByAttribute(value, ProcessStatisticsPO.domainIDAttribute,
                        getClassDescription(), cacheMode);
    }

}
